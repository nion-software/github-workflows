name: Reusable workflow to build Python package

on:
  workflow_call:
    secrets:
      anaconda-token:
        description: 'Anaconda token'
        required: true

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Build Distribution
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m build
    - name: Install Test Dependencies
      run: |
        python -m pip install mypy pytest
        pip install -r test-requirements.txt
    - name: Run Type Checking
      run: |
        mypy
    - name: Run Tests
      run: |
        python -m pytest
    - name: Upload Artifacts Debug
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        echo "Uploading artifacts"
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -lR
        echo "Matrix OS is ${{ matrix.os }}"
        echo "Matrix Python version is ${{ matrix.python-version }}"
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        name: distribution
        path: dist
    - name: Set up Miniconda for conda-build
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.11'
    - name: Build/publish anaconda package
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      shell: bash -l {0}
      run: |
        # make a directory to avoid name conflicts with the channel. argh.
        mkdir conda_build
        pushd conda_build
        conda update -n base --all -y
        conda update --all -y
        conda install conda-build anaconda-client -y
        conda-build -q -c nion --skip-existing --user nion --token ${{ secrets.anaconda-token }} ..
        popd
